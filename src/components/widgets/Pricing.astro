---
import { Icon } from 'astro-icon/components';
import Button from '~/components/ui/Button.astro';
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import type { Pricing as Props } from '~/types';
import Headline2 from '../ui/Headline2.astro';

const {
  title = '',
  subtitle = '',
  tagline = '',
  prices = [],

  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
} = Astro.props;
---

<WidgetWrapper id={id} isDark={isDark} containerClass={`mx-auto ${classes?.container ?? ''}`} bg={bg}>
  <div class="flex items-stretch justify-center">
    <div class="grid grid-cols-3 gap-4 sm:grid-cols-2 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-3">
      <div class="col-span-3 flex w-full">
        <Headline2 title={title} subtitle={subtitle} tagline={tagline} />
      </div>
      {
        prices &&
          prices.map(
            ({
              title,
              subtitle,
              price,
              oldPrice,
              period,
              items,
              callToAction,
              hasRibbon = false,
              ribbonTitle,
              disclaimer,
            }) => (
              <div class="col-span-3 mx-auto flex w-full sm:col-span-1 md:col-span-1 lg:col-span-1 xl:col-span-1">
                {price && period && hasRibbon == false && (
                  <div class="rounded-lg min-h-98 backdrop-blur border border-gray-200 dark:border-transparent bg-white dark:bg-light-gray shadow px-6 py-8 flex w-full max-w-sm flex-col justify-between">
                    {hasRibbon && ribbonTitle && (
                      <div class="absolute right-[-5px] 2xl:right-[-8px] rtl:right-auto rtl:left-[-8px] rtl:2xl:left-[-10px] top-[-5px] 2xl:top-[-10px] z-[1] h-[100px] w-[100px] overflow-hidden text-right">
                        <span class="absolute top-[19px] right-[-21px] rtl:right-auto rtl:left-[-21px] block w-full rotate-45 rtl:-rotate-45 bg-green-700 text-[10px] font-bold uppercase leading-5 text-white shadow-[0_3px_10px_-5px_rgba(0,0,0,0.3)] before:absolute before:left-0 before:top-full before:z-[-1] before:border-[3px] before:border-r-transparent before:border-b-transparent before:border-l-green-800 before:border-t-green-800 before:content-[''] after:absolute after:right-0 after:top-full after:z-[-1] after:border-[3px] after:border-l-transparent after:border-b-transparent after:border-r-green-800 after:border-t-green-800 after:content-['']">
                          {ribbonTitle}
                        </span>
                      </div>
                    )}
                    <div class="px-2 pt-8 h-full grid grid-cols-1 content-between">
                      <div>
                        {title && (
                          <h3 class="pl-3 mb-3 font-heading capitalize text-5xl font-bold tracking-wider">{title}</h3>
                        )}
                        {subtitle && <p class="font-light sm:text-lg text-gray-600 dark:text-dark-lime">{subtitle}</p>}
                        <div class="pl-3 my-0">
                          <div class="font-heading">
                            <div class="">
                              <span class="font-thin mb-3 text-5xl">s/</span>
                              <span class="text-9xl font-extrabold">&nbsp;{price}</span>
                            </div>
                          </div>
                          <span class="font-poppings text-sm leading-6 lowercase text-gray-600 dark:text-dark-lime">
                            {period}
                          </span>
                        </div>
                        {items && (
                          <ul class="my-3 md:my-8 space-y-2 text-left font-poppings text-sm">
                            {items.map(
                              ({ description, icon }) =>
                                description && (
                                  <li class="mb-1.5 flex items-start space-x-3 leading-7">
                                    <div class="rounded-full bg-dark-lime mt-1">
                                      <Icon
                                        name={icon ? icon : 'tabler:check'}
                                        class="w-5 h-5 font-bold p-1 text-dark-lime "
                                      />
                                    </div>
                                    <span>{description}</span>
                                  </li>
                                )
                            )}
                          </ul>
                        )}
                      </div>
                      {!items && disclaimer && (
                        <div class={`${disclaimer.cardColor} p-5 rounded-xl self-end`}>
                          <h3 class="font-heading text-5xl lg:text-4xl mb-3">{disclaimer.title}</h3>
                          <p class="text-sm space-x-3 leading-5">{disclaimer.text}</p>
                        </div>
                      )}
                    </div>
                    {callToAction && (
                      <div class={`flex justify-center`}>
                        {typeof callToAction === 'string' ? (
                          <Fragment set:html={callToAction} />
                        ) : (
                          callToAction &&
                          callToAction.href && (
                            <Button {...(hasRibbon ? { variant: 'primary' } : {})} {...callToAction} />
                          )
                        )}
                      </div>
                    )}
                  </div>
                )}
                {price && period && hasRibbon == true && (
                  <div class="rounded-lg backdrop-blur border dark:text-white border-gray-200 dark:border-transparent bg-blue dark:bg-blue shadow px-6 py-8 flex w-full max-w-sm flex-col justify-between">
                    {hasRibbon && ribbonTitle && (
                      <div class="absolute right-[-1px] 2xl:right-[-8px] rtl:right-auto rtl:left-[-8px] rtl:2xl:left-[-10px] top-[-1px] 2xl:top-[-10px] z-[1] h-[150px] w-[150px] overflow-hidden text-center">
                        <span class="font-poppins font-extrabold absolute h-[7rem] w-[13rem] top-[-25px] right-[-70px] rtl:right-auto rtl:left-[-21px] block rotate-45 rtl:-rotate-45 bg-orange text-center text-[35px] capitalize leading-105 text-white ">
                          {ribbonTitle}
                        </span>
                      </div>
                    )}
                    <div class="px-2 pt-8">
                      {title && (
                        <h3 class="pl-3 mb-3 font-heading capitalize text-5xl font-bold tracking-wider">{title}</h3>
                      )}
                      {subtitle && <p class="font-light sm:text-lg text-gray-600 dark:text-white">{subtitle}</p>}
                      <div class="pl-3 my-0">
                        <div class="font-heading grid grid-cols-2 gap-4">
                          <div class="">
                            <span class="font-thin mb-3 text-5xl">s/</span>
                            <span class="text-9xl font-extrabold">&nbsp;{price}</span>
                          </div>
                          <div class="line-through">
                            <span class="font-thin text-3xl">s/</span>
                            <span class="text-3xl font-extrabold">{oldPrice}</span>
                          </div>
                        </div>
                        <span class="font-poppings text-sm leading-6 lowercase text-gray-600 dark:text-white">
                          {period}
                        </span>
                      </div>
                      {items && (
                        <ul class="my-3 md:my-8 space-y-2 text-left font-poppings text-sm">
                          {items.map(
                            ({ description, icon }) =>
                              description && (
                                <li class="mb-1.5 flex items-start space-x-3 leading-5">
                                  <div class="rounded-full bg-white mt-2">
                                    <Icon
                                      name={icon ? icon : 'tabler:check'}
                                      class="w-3 h-3 font-bold p-1 text-white "
                                    />
                                  </div>
                                  <span>{description}</span>
                                </li>
                              )
                          )}
                        </ul>
                      )}
                    </div>
                    {callToAction && (
                      <div class={`flex justify-center`}>
                        {typeof callToAction === 'string' ? (
                          <Fragment set:html={callToAction} />
                        ) : (
                          callToAction &&
                          callToAction.href && (
                            <Button {...(hasRibbon ? { variant: 'quarter' } : {})} {...callToAction} />
                          )
                        )}
                      </div>
                    )}
                  </div>
                )}
              </div>
            )
          )
      }
    </div>
  </div>
</WidgetWrapper>
